buildscript {
  if ("$gradle.gradleVersion" != "6.3") {
    throw new GradleException("Gradle version 6.3 is required (received $gradle.gradleVersion)")
  }

  ext.kotlin_version = "1.3.72"

  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:4.3.1"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'com.android.tools.build:gradle:3.5.3'
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.27.0"
  id "de.marcphilipp.nexus-publish" version "0.4.0"
  id "digital.wup.android-maven-publish" version "3.6.3"
  id "ru.vyarus.animalsniffer" version "1.5.0"
}

ext {
  androidBuildToolsVersion = "28.0.3"
  androidCompileSDKVersion = 28
  androidMinimumSDKVersion = 21
  androidTargetSDKVersion = 28

  if (!project.hasProperty("mavenCentralUsername")) {
    logger.warn("No mavenCentralUsername property specified: Using an empty value")
    mavenCentralUsername = ""
  }
  if (!project.hasProperty("mavenCentralPassword")) {
    logger.warn("No mavenCentralPassword property specified: Using an empty value")
    mavenCentralPassword = ""
  }

  mavenCentralReleasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
  mavenCentralSnapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"

  if (project.hasProperty("org.librarysimplified.directory.publish")) {
    useDirectoryPublishPath = project.property("org.librarysimplified.directory.publish")
    useDirectoryPublish = true
    logger.warn("org.librarysimplified.directory.publish is set: We will publish artifacts to ${useDirectoryPublishPath}")
  } else {
    logger.warn("org.librarysimplified.directory.publish is not set: We will not publish artifacts to a custom directory")
    useDirectoryPublish = false
    useDirectoryPublishPath = null
  }
}

ext.libraries = [
  kotlinStdlib: "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
]

allprojects {
  group = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]
}

subprojects { project ->

  switch (POM_PACKAGING) {
    case "jar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as jar project")

      apply plugin: "java"
      apply plugin: "java-library"
      apply plugin: "kotlin"

      /*
       * Apply the Animal Sniffer plugin to check that code is Android compatible.
       */

      apply plugin: "ru.vyarus.animalsniffer"

      dependencies {
        signature "org.codehaus.mojo.signature:java16:1.1@signature"
        signature "net.sf.androidscents.signature:android-api-level-14:4.0_r4@signature"
      }

      /*
       * Build an OSGi bundle.
       */

      apply plugin: "biz.aQute.bnd.builder"

      jar {
        bnd """
Automatic-Module-Name: ${POM_AUTOMATIC_MODULE_NAME}

-removeheaders: Bnd-LastModified, Tool, Private-Package
"""
      }
      break

    case "apk":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android application project")

      apply plugin: "com.android.application"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
        }
        compileOptions {
          encoding 'UTF-8'
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
      }
      break

    case "aar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android library project")

      apply plugin: "com.android.library"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          multiDexEnabled true
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
          testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
          useLibrary 'org.apache.http.legacy'
        }
        compileOptions {
          encoding 'UTF-8'
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        testOptions {
          execution 'ANDROIDX_TEST_ORCHESTRATOR'
          animationsDisabled = true
        }
      }
      break

    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  task javadocsJar(type: Jar) {
    classifier = "javadoc"
  }

  task sourcesJar(type: Jar) {
    classifier = "sources"
    from "src/main/java", "src/main/resources"
  }

  apply plugin: "digital.wup.android-maven-publish"
  apply plugin: "signing"

  publishing {
    publications {
      basicJar(MavenPublication) {

        switch (POM_PACKAGING) {
          case "jar":
            from components.java
            break

          case "apk":
            break

          case "aar":
            from components.android
            break
        }

        artifact sourcesJar
        artifact javadocsJar

        pom {
          artifactId = POM_ARTIFACT_ID
          name = POM_NAME
          packaging = POM_PACKAGING
          description = POM_DESCRIPTION
          url = POM_URL

          scm {
            connection = POM_SCM_CONNECTION
            developerConnection = POM_SCM_DEV_CONNECTION
            url = POM_SCM_URL
          }

          licenses {
            license {
              name = POM_LICENCE_NAME
              url = POM_LICENCE_URL
            }
          }

          developers {
            developer {
              id = "io7m"
              name = "Mark Raynsford"
              email = "code@io7m.com"
              url = "https://www.io7m.com"
            }
            developer {
              id = "winniequinn"
              name = "Winnie Quinn"
              url = "https://www.winniequinn.com/"
            }
            developer {
              id = "gioneill"
              name = "Greg O'Neill"
              url = "https://github.com/gioneill"
            }
            developer {
              id = "mattniehoff"
              name = "Matt Niehoff"
              url = "https://github.com/mattniehoff"
            }
            developer {
              id = "MalcolmMcFly"
              name = "Malcolm Woods"
              url = "https://github.com/MalcolmMcFly"
            }
          }
        }
      }
    }

    repositories {
      if (useDirectoryPublish) {
        logger.info("using ${useDirectoryPublishPath} for publication")

        maven {
          name = "Directory"
          url = "file://${useDirectoryPublishPath}"
        }
      }
    }
  }

  signing {
    useGpgCmd()
    sign publishing.publications.basicJar
  }

  tasks.withType(Sign) { task ->
    def isSnapshot = version.endsWith("SNAPSHOT")

    // Sign release versions only; not snapshots
    onlyIf {
      if (isSnapshot) {
        logger.warn("$POM_NAME: '$version' is a snapshot version; artifacts will not be signed")
      } else {
        logger.info("$POM_NAME: '$version' is a release version; artifacts will be signed")
      }
      return !isSnapshot
    }
  }

  repositories {
    mavenLocal()
    mavenCentral()
  }
}
